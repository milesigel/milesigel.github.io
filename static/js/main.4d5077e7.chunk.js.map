{"version":3,"sources":["components/Header.js","components/FinalScore.js","components/ActionList.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","createElement","className","style","backgroundImage","concat","process","src","alt","FinalScore","_ref","score","onClick","url","window","open","ActionList","_useState","useState","_useState2","_slicedToArray","completedActions","setCompletedActions","_useState3","_useState4","setScore","_useState5","_useState6","showFinalScore","setShowFinalScore","Fragment","actions","map","action","index","key","includes","id","actionIndex","indexOf","_toConsumableArray","slice","toggleAction","role","aria-label","name","length","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4d5077e7.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"header-container\">\n      <div className=\"header-background\" style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/pub_area_cropped.jpeg)` }} />\n      <div className=\"header-content\">\n        <img src={process.env.PUBLIC_URL + '/pub_logo.jpeg'} alt=\"Pub logo\" className=\"logo-image\" />\n        <h1>Pub Purity Test</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport '../styles/FinalScore.css';\n\nfunction FinalScore({ score }) {\n  const handleShare = () => {\n    const url = `https://twitter.com/intent/tweet?text=I scored ${score} on the Pub Purity Test!&hashtags=PubPurityTest`;\n    window.open(url, '_blank');\n  };\n\n  return (\n    <div className=\"final-score\">\n      <img src=\"./wooly.png\" alt=\"Pub Purity Test\" className=\"final-score__image\" />\n      <h2 className=\"final-score__heading\">Final Score</h2>\n      <p className=\"final-score__text\">Your score: {100-score}</p>\n      <button onClick={handleShare} className=\"final-score__button\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/sco/9/9f/Twitter_bird_logo_2012.svg\" alt=\"Twitter logo\" className=\"final-score__button-icon\" />\n        Share on Twitter\n      </button>\n    </div>\n  );\n}\n\nexport default FinalScore;\n","import React, { useState } from 'react';\nimport '../styles/ActionList.css';\nimport actions from '../data/data.json';\nimport FinalScore from './FinalScore';\n\nfunction ActionList() {\n  const [completedActions, setCompletedActions] = useState([]);\n  const [score, setScore] = useState(0);\n  const [showFinalScore, setShowFinalScore] = useState(false);\n\n  const toggleAction = (index) => {\n    const actionIndex = completedActions.indexOf(index);\n    if (actionIndex === -1) {\n      setCompletedActions([...completedActions, index]);\n    } else {\n      setCompletedActions([\n        ...completedActions.slice(0, actionIndex),\n        ...completedActions.slice(actionIndex + 1),\n      ]);\n    }\n  };\n\n  const calculateScore = () => {\n    return completedActions.length;\n  };\n\n  const handleGetScoreClick = () => {\n    const score = calculateScore();\n    setScore(score);\n    setShowFinalScore(true);\n  };\n\n  return (\n    <div className=\"action-list\">\n      {!showFinalScore && (\n        <>\n          <div className=\"instructions\">\n            <p>The Pub Purity Test has historically served as a segue from not going out before highschool to true college life at Rice.</p>\n            <p>It's a voluntary opportunity for friend groups to bond, and for students to track the maturation of their experiences throughout college.</p>\n            <p>Caution: This is not a bucket list. Completion of all items on this test will likely result in hype.</p>\n            <p>Click on every item you have done. MPS stands for Member of the Preferred Sex.</p>\n          </div>\n          <div className=\"action-container\">\n            {actions.map((action, index) => (\n              <div\n                key={index}\n                className={`action ${completedActions.includes(action.id) ? 'completed' : ''}`}\n                onClick={() => toggleAction(action.id)}\n              >\n                {completedActions.includes(action.id) && <span role=\"img\" aria-label=\"BEER\" className=\"checkmark\">üç∫</span>}\n                <span className=\"action-text\"> {action.id}. {action.name}?</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"score-container\">\n            <button onClick={handleGetScoreClick}>Get Score</button>\n            {score !== 0 && <p>Your score: {score}</p>}\n          </div>\n        </>\n      )}\n      {showFinalScore && <FinalScore score={score} />}\n    </div>\n  );\n}\n\nexport default ActionList;\n","import React from 'react';\nimport Header from './components/Header';\nimport ActionList from './components/ActionList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ActionList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}